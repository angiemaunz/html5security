#summary This page attempts to list all redirect methods relevant in terms of web application and browser security
#labels redirects,security,html,pdf,java,javascript,flash


== Introduction ==

Redirects are often important tools for attackers and even more often ignored as such. They can be used to initialize attacks, jump to malicious URLs, hide important content visible in the address bar or execute script code. This wiki page attempts to list all of them -  no matter if initiated by the browser or delegated to the browser by other tools such as Flash content, Java applets and PDF files.

Great information on redirection methods can also be found here:  
 * http://en.wikipedia.org/wiki/URL_redirection
 * http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards

Not so great and hopefully soon to be updated info can be found here:
http://www.owasp.org/index.php/Open_redirect

== Redirection Methods ==

=== HTML ===

|| *Name* || *Code* || *Cross Domain* || *User Interaction* || *Notes* ||
|| META Refresh || {{{<meta http-equiv="refresh" content="0;url=http://evil.com/" />}}} || Yes || No || Depending on the user agent the target can be javascript: or data: URIs to execute JavaScript. Usually the JavaScript will execute on about:blank. More info can be found here: http://en.wikipedia.org/wiki/Meta_refresh ||
|| META Location || {{{<meta http-equiv="location" content="URL=http://evil.com" />}}} || Yes || No || Not many user agents support this method anymore. Some resources such as http://help.dottoro.com/lhquobhe.php claim it works on all browsers - which has been falsified during testing. ||

=== JavaScript ===

|| *Name* || *Code* || *Cross Domain* || *User Interaction* || *Notes* ||
|| Setting location || {{{location='http://evil.com/';}}} || Yes || No || Note that you can access location by either using location, `window.location` (including all `window`, `parent` and `top` aliases) as well as `document.location` in most user agents. This is for the following variable assignments and method calls too. All properties can be set with `javascript:`, `data:` or `vbscript:` URIs to execute JavaScript on the originating domain. ||
|| Setting location.href || {{{location.href='http://evil.com/';}}} || Yes || No ||  ||
|| Calling location.replace() || {{{location.replace('http://evil.com/');}}} || Yes || No ||  ||
|| Calling location.assign() || {{{location.replace('http://evil.com/');}}} || Yes || No ||  ||
|| Calling window.navigate() || {{{window.navigate('http://evil.com/');}}} || Yes || No || This method is non-standard and currently being supported by Internet Explorer and Opera ||
|| Calling window.open() || {{{window.open('http://evil.com/');}}} || Yes || Yes || Most modern browsers will activate the popup blocker before performing the request. Thus the user interaction flag is set to `Yes`. This method call is not necessarily a redirect but can be turned into one by consolidating name and target value of opener and popup. Arbitrary URIs and protocol handlers can be used with this method. ||
|| Calling showModalDialog() || {{{window.showModalDialog('http://evil.com/');}}} || Yes || Yes || Same as with `window.open()` this method call activates the popup blocker if not called with a trusted event. Arbitrary URIs and protocol handlers can be used with this method. ||
|| Setting document.URL || {{{document.URL='http://evil.com/';}}} || Yes || No || This non standard behavior only works in Internet Explorer. Its possible to use arbitrary protocol handlers - such as for example `javascript:` and `vbscript:` to execute JavaScript. ||



=== Flash ===

|| *Name* || *Code* || *Cross Domain* || *User Interaction* || *Notes* ||
|| getURL() Redirect || {{{getURL('http://evil.com/', false)}}} || Yes || No || It is possible to use `javascript:` URIs and other protocol handlers to execute JavaScript. The domain context depends on the domain the Flash file is being stored on if opened directly - or embedded from if instantiated via `<object>` or `<embed>`. More info on `getURL()` can be found here: http://kb2.adobe.com/cps/141/tn_14192.html ||
|| navigateToURL() Redirect || %code% || %sop% || %ui || %notes ||

=== Java ===

|| *Name* || *Code* || *Cross Domain* || *User Interaction* || *Notes* ||
|| Applet showDocument() || {{{getAppletContext().showDocument(new URL('http://evil.com'), '_self');}}} || Yes || No || The Java applet can redirect the user agent to any given HTTP URL. Note that current Java Runtime Engine versions use a whitelist of protocol handlers.  ||
|| Applet and internal Java Browser || {{{with(new Packages.javax.swing.JFrame()){add(new Packages.javax.swing.JEditorPane('http://evil.com/')),setSize(500,500),setVisible(true)}}}} || No || No || Java provides an internal minimalistic browser. This tool is capable for rendering minimal HTML but can be used to leverage more complex attacks. The show demo code is working on Gecko based browsers when executed as JavaScript. ||

=== PDF ===

|| *Name* || *Code* || *Cross Domain* || *User Interaction* || *Notes* ||
|| launchURL() Redirect || {{{app.launchURL('http://evil.com/', false)}}} || Yes || Yes/No || Note that an embedded Adobe PDF reader can redirect without user interaction in case the SOP is not being violated by the redirect target. Otherwise modern versions of the Acrobat Reader pop up a confirmation dialog before redirecting. Adobe Script uses a blacklist to forbid redirects to file:, javascript: and data: URIs as well as vbscript:  and jscript: URIs. You can find more information on app.launchURL() in he Acrobat Script documentation:  http://livedocs.adobe.com/acrobat_sdk/9.1/Acrobat9_1_HTMLHelp/wwhelp/wwhimpl/common/html/wwhelp.htm?context=Acrobat9_HTMLHelp&file=JS_API_AcroJS.88.150.html Note that the Adobe Reader will open the page to redirect on in the default browser - which is not necessarily the browser showing the document with the embedded PDF. ||
|| getURL() Redirect || {{{app.getURL('http://evil.com/', false)}}} || Yes || Yes/No || This method has been heavily restricted security wise and can only be used as a redirect helper in Acrobat versions older than Acrobat 6.0. The documentation for this method can be found here: http://livedocs.adobe.com/acrobat_sdk/9.1/Acrobat9_1_HTMLHelp/wwhelp/wwhimpl/common/html/wwhelp.htm?context=Acrobat9_HTMLHelp&file=JS_API_AcroJS.88.495.html ||

=== XML ===

|| *Name* || *Code* || *Cross Domain* || *User Interaction* || *Notes* ||
|| XLink Redirect || {{{<x xmlns:xlink="http://www.w3.org/1999/xlink" xlink:actuate="onLoad" xlink:href="http://evil.com" xlink:type="simple"/>}}} || Yes || No || This example currently works on Gecko based browsers. XLink `href` attributes can be triggered to be activated by an XLink `actuate` attribute applied with `onload`. This kind of redirect is thus basically a self-clicking link. More info is available here:  http://html5sec.org/#81 ||

=== OpenOffice ===

=== Special Cases ===