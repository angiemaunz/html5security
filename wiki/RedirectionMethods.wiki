#summary This page attempts to list all redirect methods relevant in terms of web application and browser security


== Introduction ==

Redirects are important tools for attackers. They can be used to initialize attacks, jump to malicious URLs, hide important content visible in the address bar or worse. This wiki page attempts to list all of them -  no matter if initiated by the browser or delegated to the browser by other tools such as Flash content, Java applets and PDF files.

Great in formation on redirection methods can also be found here: http://en.wikipedia.org/wiki/URL_redirection#Refresh_Meta_tag_and_HTTP_refresh_header

== Redirection Methods ==

=== HTML ===

|| *Name* || *Code* || *Cross Domain* || *User Interaction* || *Notes* ||
|| META Refresh || {{{<meta http-equiv="refresh" content="0;url=http://evil.com/" />}}} || Yes || No || Depending on the user agent the target can be javascript: or data: URIs to execute JavaScript. Usually the JavaScript will execute on about:blank. More info can be found here: http://en.wikipedia.org/wiki/Meta_refresh ||
|| META Location || {{{<meta http-equiv="location" content="URL=http://evil.com" />}}} || Yes || No || Not many user agents support this method anymore. Some resources such as http://help.dottoro.com/lhquobhe.php claim it works on all browsers - which has been falsified during testing. ||

=== JavaScript ===

|| *Name* || *Code* || *Cross Domain* || *User Interaction* || *Notes* ||
|| Setting location || {{{location='http://evil.com/';}}} || Yes || No || Note that you can access location by either using location, window.location (including all window and top aliases) as well as document.location in most user agents. This is for the following variable assignments and method calls too. ||
|| Setting location.href || {{{location.href='http://evil.com/';}}} || Yes || No ||  ||
|| Calling location.replace() || {{{location.replace('http://evil.com/');}}} || Yes || No ||  ||
|| Calling location.assign() || {{{location.replace('http://evil.com/');}}} || Yes || No ||  ||
|| Calling window.navigate() || {{{window.navigate('http://evil.com/');}}} || Yes || No || This method is non-standard and currently being supported by Internet Explorer and Opera ||


=== Flash ===

|| *Name* || *Code* || *Cross Domain* || *User Interaction* || *Notes* ||
|| getURL() Redirect || {{{getURL('http://evil.com/', false)}}} ||  ||  ||  ||

=== Java ===

|| *Name* || *Code* || *Cross Domain* || *User Interaction* || *Notes* ||
|| Applet showDocument() || {{{getAppletContext().showDocument(new URL('http://evil.com'));}}} || Yes || No || The Java applet can redirect the user agent to any given HTTP URL. Note that current Java Runtime Engine versions use a whitelist of protocol handlers.  ||

=== PDF ===

|| *Name* || *Code* || *Cross Domain* || *User Interaction* || *Notes* ||
|| launchURL() Redirect || {{{app.launchURL('http://evil.com/', false)}}} || Yes || Yes/No || Note that an embedded Adobe PDF reader can redirect without user interaction in case the SOP is not being violated by the redirect target. Otherwise modern versions of the Acrobat Reader pop up a confirmation dialog before redirecting. Adobe Script uses a blacklist to forbid redirects to file:, javascript: and data: URIs as well as vbscript:  and jscript: URIs. You can find more information on app.launchURL() in he Acrobat Script documentation:  http://livedocs.adobe.com/acrobat_sdk/9.1/Acrobat9_1_HTMLHelp/wwhelp/wwhimpl/common/html/wwhelp.htm?context=Acrobat9_HTMLHelp&file=JS_API_AcroJS.88.150.html ||
|| getURL() Redirect || {{{app.getURL('http://evil.com/', false)}}} || Yes ||  ||  ||

=== XML ===

=== OpenOffice ===

=== Special Cases ===